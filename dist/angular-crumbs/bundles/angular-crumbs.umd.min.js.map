{"version":3,"sources":["ng://angular-crumbs/lib/breadcrumb.ts","ng://angular-crumbs/lib/breadcrumb.service.ts","ng://angular-crumbs/lib/breadcrumb.component.ts","ng://angular-crumbs/lib/breadcrumb.module.ts"],"names":["BreadcrumbService","router","_this","this","breadcrumbChanged","EventEmitter","breadcrumbs","Array","events","subscribe","routeEvent","onRouteEvent","prototype","changeBreadcrumb","route","name","rootUrl","createRootUrl","breadcrumb","find","bc","url","displayName","emit","NavigationEnd","routerState","root","snapshot","breadCrumbIndex","newCrumbs","firstChild","routeConfig","path","createUrl","data","newCrumb","createBreadcrumb","length","existing","push","terminal","isTerminal","map","s","toString","join","next","core","ɵɵinject","Router","factory","ɵfac","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵproperty","i0.ɵɵadvance","i0.ɵɵtextInterpolate","i0.ɵɵtemplate","BreadcrumbComponent","breadcrumbService","crumbs","onBreadcrumbChange","ɵɵdirectiveInject","selectors","ngContentSelectors","_c2","decls","vars","consts","template","rf","ctx","i0.ɵɵprojection","breadcrumbServiceFactory","BreadcrumbModule","providers","provide","useFactory","deps","imports","CommonModule","RouterModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Route } from \"@angular/router\";\r\n\r\nexport class Breadcrumb {\r\n    displayName: string;\r\n    terminal: boolean;\r\n    url: string;\r\n    route: Route | null;\r\n}\r\n","import { Injectable, EventEmitter } from '@angular/core';\r\nimport { Router, ActivatedRouteSnapshot, Event, NavigationEnd } from '@angular/router';\r\n\r\nimport { Breadcrumb } from './breadcrumb';\r\n\r\n@Injectable()\r\nexport class BreadcrumbService {\r\n    breadcrumbChanged = new EventEmitter<Breadcrumb[]>(false);\r\n\r\n    private breadcrumbs = new Array<Breadcrumb>();\r\n\r\n    constructor(private router: Router) {\r\n        this.router.events.subscribe((routeEvent) => { this.onRouteEvent(routeEvent); });\r\n    }\r\n\r\n    public changeBreadcrumb(route: ActivatedRouteSnapshot, name: string) {\r\n        const rootUrl = this.createRootUrl(route);\r\n        const breadcrumb = this.breadcrumbs.find(function (bc) { return bc.url === rootUrl; });\r\n\r\n        if (!breadcrumb) { return; }\r\n\r\n        breadcrumb.displayName = name;\r\n\r\n        this.breadcrumbChanged.emit(this.breadcrumbs);\r\n    }\r\n\r\n    private onRouteEvent(routeEvent: Event) {\r\n        if (!(routeEvent instanceof NavigationEnd)) { return; }\r\n\r\n        let route = this.router.routerState.root.snapshot;\r\n        let url = '';\r\n\r\n        var breadCrumbIndex = 0;\r\n        var newCrumbs = [];\r\n\r\n        while (route.firstChild != null) {\r\n            route = route.firstChild;\r\n\r\n            if (route.routeConfig === null) { continue; }\r\n            if (!route.routeConfig.path) { continue; }\r\n\r\n            url += `/${this.createUrl(route)}`;\r\n\r\n            if (!route.data['breadcrumb']) { continue; }\r\n\r\n            var newCrumb = this.createBreadcrumb(route, url)\r\n\r\n            if (breadCrumbIndex < this.breadcrumbs.length) {\r\n              var existing = this.breadcrumbs[breadCrumbIndex++];\r\n\r\n              if (existing && existing.route == route.routeConfig) {\r\n                newCrumb.displayName = existing.displayName;\r\n              }\r\n            }\r\n\r\n            newCrumbs.push(newCrumb);\r\n        }\r\n\r\n        this.breadcrumbs = newCrumbs;\r\n        this.breadcrumbChanged.emit(this.breadcrumbs);\r\n    }\r\n\r\n    private createBreadcrumb(route: ActivatedRouteSnapshot, url: string): Breadcrumb {\r\n        return {\r\n            displayName: route.data['breadcrumb'],\r\n            terminal: this.isTerminal(route),\r\n            url: url,\r\n            route: route.routeConfig\r\n        }\r\n    }\r\n\r\n    private isTerminal(route: ActivatedRouteSnapshot) {\r\n        return route.firstChild === null\r\n            || route.firstChild.routeConfig === null\r\n            || !route.firstChild.routeConfig.path;\r\n    }\r\n\r\n    private createUrl(route: ActivatedRouteSnapshot) {\r\n        return route.url.map(function (s) { return s.toString(); }).join('/');\r\n    }\r\n\r\n    private createRootUrl(route: ActivatedRouteSnapshot) {\r\n        let url = '';\r\n        let next = route.root;\r\n\r\n        while (next.firstChild !== null) {\r\n            next = next.firstChild;\r\n\r\n            if (next.routeConfig === null) { continue; }\r\n            if (!next.routeConfig.path) { continue; }\r\n\r\n            url += `/${this.createUrl(next)}`;\r\n\r\n            if (next === route) { break; }\r\n        }\r\n\r\n        return url;\r\n    }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\nimport { Breadcrumb } from './breadcrumb';\r\nimport { BreadcrumbService } from './breadcrumb.service';\r\n\r\n@Component({\r\n    // tslint:disable-next-line:component-selector\r\n    selector: 'breadcrumb',\r\n    template:\r\n    `<div #template>\r\n    <ng-content></ng-content>\r\n</div>\r\n<div class=\"container\" *ngIf=\"template.children.length == 0\">\r\n    <div class=\"nav-wrapper\">\r\n        <div class=\"breadcrumb\" *ngFor=\"let route of breadcrumbs\" [ngClass]=\"{'last': route.terminal}\">\r\n            <!-- disable link of last item -->\r\n            <a href=\"\" *ngIf=\"!route.terminal\" [routerLink]=\"[route.url]\">{{ route.displayName }}</a>\r\n            <span *ngIf=\"route.terminal\">{{ route.displayName }}</span>\r\n        </div>\r\n    </div>\r\n</div>`\r\n})\r\nexport class BreadcrumbComponent {\r\n    breadcrumbs: Breadcrumb[];\r\n\r\n    constructor(private breadcrumbService: BreadcrumbService) {\r\n        breadcrumbService.breadcrumbChanged.subscribe((crumbs: Breadcrumb[]) => { this.onBreadcrumbChange(crumbs); });\r\n    }\r\n\r\n    private onBreadcrumbChange(crumbs: Breadcrumb[]) {\r\n        this.breadcrumbs = crumbs;\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Router } from '@angular/router';\r\n\r\nimport { BreadcrumbService } from './breadcrumb.service';\r\nimport { BreadcrumbComponent } from './breadcrumb.component';\r\n\r\nexport function breadcrumbServiceFactory(router: Router) {\r\n    return new BreadcrumbService(router);\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule, RouterModule],\r\n    providers: [\r\n        { provide: BreadcrumbService, useFactory: breadcrumbServiceFactory, deps: [Router] }\r\n    ],\r\n    declarations: [BreadcrumbComponent],\r\n    exports: [BreadcrumbComponent]\r\n})\r\nexport class BreadcrumbModule { }\r\n"]}